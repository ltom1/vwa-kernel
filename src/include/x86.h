///////////////////////////////////////////////////////////////////////////////////////////////////
/// @file
/// @brief  Contains functions for the x86_64 architecture.
///
/// @note   All funtions are always inlined and written in inline assembly.
///////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once


#include <types.h>
#include <gdt.h>
#include <paging.h>


#define ASM __asm__ __volatile__


///////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Reads a byte of data from an I/O port.
///
/// @param  port    The port to read from.
///////////////////////////////////////////////////////////////////////////////////////////////////

static INLINE u8 x86_inb(u16 port) {

     u8 res;

     // "=a" (res) -> eax into res
     // "d" (port) -> port into edx
     ASM("in al, dx" : "=a" (res) : "d" (port) : "memory");

     return res;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Writes a byte of data to an I/O port.
///
/// @param  port    The port to write to.
/// @param  data    The data to write.
///////////////////////////////////////////////////////////////////////////////////////////////////

static INLINE void x86_outb(u16 port, u8 data) {

     // "a" (data) -> data into eax
     // "d" (port) -> port into edx
     ASM("out dx, al" : : "a" (data), "d" (port) : "memory");
}


///////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Reads a word of data from an I/O port.
///
/// @param  port    The port to read from.
///////////////////////////////////////////////////////////////////////////////////////////////////

static INLINE u16 x86_inw(u16 port) {

     u16 res;

     // "=a" (res) -> eax into res
     // "d" (port) -> port into edx
     ASM("in ax, dx" : "=a" (res) : "d" (port) : "memory");

     return res;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Writes a word of data to an I/O port.
///
/// @param  port    The port to write to.
/// @param  data    The data to write.
///////////////////////////////////////////////////////////////////////////////////////////////////

static INLINE void x86_outw(u16 port, u16 data) {

     // "a" (data) -> data into eax
     // "d" (port) -> port into edx
     ASM("out dx, ax" : : "a" (data), "d" (port) : "memory");
}


///////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Disables interrupts.
///////////////////////////////////////////////////////////////////////////////////////////////////

static INLINE void x86_cli(void) {
    ASM("cli" : : : "memory");
}


///////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Reenables interrupts.
///////////////////////////////////////////////////////////////////////////////////////////////////

static INLINE void x86_sti(void) {
    ASM("sti" : : : "memory");
}


///////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Pauses the CPU.
///
/// @warning    It is not guaranteed to stay paused as there are still interrupts.
///////////////////////////////////////////////////////////////////////////////////////////////////

static INLINE void x86_hlt(void) {
    ASM("hlt" : : : "memory");
}


///////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Stops the CPU entirely.
///
/// @warning    Disables all interrupts.
///////////////////////////////////////////////////////////////////////////////////////////////////

static INLINE NORETURN void x86_hang(void) {
    x86_cli();
    while (1) x86_hlt();
}


///////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Blocks for a few ms.
///
/// Used when doing I/O operations.
///////////////////////////////////////////////////////////////////////////////////////////////////

static INLINE void x86_io_wait(void) {
    x86_outb(0x80, 0);
}


///////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Invalidates all TLB entries associated with a virtual address.
///
/// @param  vaddr   The virtual address.
///////////////////////////////////////////////////////////////////////////////////////////////////

static INLINE void x86_invlpg(u64 vaddr) {
    ASM("invlpg [%0]" : : "r" (vaddr) : "memory");
}


///////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Changes the stack pointer to a new stack.
///
/// @param  vaddr   The virtual address of the new stack.
///////////////////////////////////////////////////////////////////////////////////////////////////

static INLINE void x86_set_stack(u64 vaddr) {
    ASM("mov rsp, %0" : : "r" (vaddr) : "memory");
}


///////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Returns the current value of the rsp register.
///////////////////////////////////////////////////////////////////////////////////////////////////

static INLINE u64 x86_get_stack(void) {
    u64 rsp;
    ASM("mov %0, rsp" : "=r" (rsp) : : "memory");
    return rsp;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Loads a PML4T.
///
/// @param  pt4     The address of the page table to load.
///
/// Loads the address of a page table into the cr3 register.
///////////////////////////////////////////////////////////////////////////////////////////////////

static INLINE void x86_load_pt4(pt_t pt4) {
    ASM("mov cr3, %0" : : "r" (pt4) : "memory");
}

///////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Reads a Model Specific Register (MSR).
///
/// @param  msr     The MSR number of the register.
///////////////////////////////////////////////////////////////////////////////////////////////////

static INLINE u64 x86_rdmsr(u32 msr) {
    u32 high, low;
    ASM("rdmsr" : "=a" (low), "=d" (high) : "c" (msr) : "memory");
    return ((u64)high << 32) | low;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Writes to a Model Specific Register (MSR).
///
/// @param  msr     The MSR number of the register.
///////////////////////////////////////////////////////////////////////////////////////////////////

static INLINE void x86_wrmsr(u32 msr, u64 val) {
    ASM("wrmsr" : : "a" (val & 0xFFFFFFFF), "d" (val >> 32), "c" (msr) : "memory");
}


///////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Changes the kernel stack.
///
/// @param  kstack  The virtual address of the new kernel stack.
///
/// Saves the old stack in the TSS and loads the new stack into rsp.
///////////////////////////////////////////////////////////////////////////////////////////////////

static INLINE void x86_change_kstack(u64 kstack) {

    tss.rsp0 = x86_get_stack();
    x86_set_stack(kstack);
}
